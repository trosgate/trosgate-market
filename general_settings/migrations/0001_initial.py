# Generated by Django 3.2.8 on 2022-05-24 22:47

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AutoLogoutSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview', models.CharField(blank=True, default='Auto Logout System', max_length=50, verbose_name='Preview')),
                ('warning_time_schedule', models.PositiveIntegerField(blank=True, default='2', help_text='By default the system will attempt to logout user every 2hrs with a prompt. You can change it in hours or days', verbose_name='Warning Time')),
                ('interval', models.CharField(blank=True, default='+2 Hours', help_text='The period of time user can extend to remain logged-in before another warning', max_length=10, verbose_name='Extension Interval')),
            ],
            options={
                'verbose_name': 'Logout Control',
                'verbose_name_plural': 'Logout Control',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Category field is Required', max_length=50, unique=True, verbose_name='Name')),
                ('icon', models.ImageField(default='categories/category.png', upload_to='categories/', verbose_name='Icon')),
                ('preview', models.TextField(blank=True, help_text='Summarized info about your category', max_length=60, null=True, verbose_name='Preview')),
                ('visible', models.BooleanField(choices=[(False, 'Private'), (True, 'Public')], default=False)),
                ('slug', models.SlugField(verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='CommunicationLanguage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('language', models.CharField(help_text='User Communication Language Required', max_length=100, unique=True, verbose_name='User Communication Language')),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Currency Name')),
                ('code', models.CharField(default='USD', max_length=10, verbose_name='Code')),
                ('symbol', models.CharField(max_length=10, verbose_name='Currency')),
                ('supported', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, verbose_name='Supported')),
                ('ordering', models.PositiveIntegerField(blank=True, null=True, verbose_name='Order Priority')),
                ('default', models.BooleanField(blank=True, choices=[(False, 'No'), (True, 'Yes')], verbose_name='Default')),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Department field is Required', max_length=100, unique=True, verbose_name='Department Name')),
            ],
            options={
                'verbose_name': 'Client Department',
                'verbose_name_plural': 'Clients Department',
            },
        ),
        migrations.CreateModel(
            name='DepositControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview', models.CharField(default='All about Deposit configuration', max_length=50, verbose_name='Deposit Settings')),
                ('min_balance', models.PositiveIntegerField(default=0, help_text='User with this minimum balance qualifies to make deposit (restricted to base Zero currency point', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Balance')),
                ('max_balance', models.PositiveIntegerField(default=2000, help_text='User with this Maximum balance has reached the max limit for further deposit(restricted to 500000 currency points)', validators=[django.core.validators.MaxValueValidator(50000)], verbose_name='Maximum Balance')),
                ('min_deposit', models.PositiveIntegerField(default=20, help_text='Minimum mount client can deposit - (restricted to 20 minimum currency points)', validators=[django.core.validators.MinValueValidator(20)], verbose_name='Minimum Deposit Amount')),
                ('max_deposit', models.PositiveIntegerField(default=500, help_text='Maximum amount client can deposit', validators=[django.core.validators.MaxValueValidator(50000)], verbose_name='Maximum Deposit Amount')),
            ],
            options={
                'verbose_name': 'Deposit Settings',
                'verbose_name_plural': 'Deposit Settings',
            },
        ),
        migrations.CreateModel(
            name='DiscountSystem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview', models.CharField(default='Level Based Discount System', max_length=50, verbose_name='Preview')),
                ('level_one_name', models.CharField(default='Level One Discount System', max_length=30, unique=True, verbose_name='Level One(L1)')),
                ('level_one_rate', models.PositiveIntegerField(default=0, help_text='Starting Rate for L1 Discount with minimum of 0%', validators=[django.core.validators.MinValueValidator(0)], verbose_name='L1 Rate')),
                ('level_one_start_amount', models.PositiveIntegerField(default=0, help_text='Minimum checkout Amount is $0', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(0)], verbose_name='L1 Amount Start')),
                ('level_one_delta_amount', models.PositiveIntegerField(default=199, help_text='checkout Amount between $0 - $299', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(299)], verbose_name='L1 Amount Delta')),
                ('level_two_name', models.CharField(default='Level Two Discount System', max_length=30, unique=True, verbose_name='Level Two(L2)')),
                ('level_two_rate', models.PositiveIntegerField(default=3, help_text='Second level Rate for L2 Discount with minimum of 3%', validators=[django.core.validators.MinValueValidator(3)], verbose_name='L2 Rate')),
                ('level_two_start_amount', models.PositiveIntegerField(default=300, help_text='Minimum checkout Amount is $300', validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(300)], verbose_name='L2 Amount Start')),
                ('level_two_delta_amount', models.PositiveIntegerField(default=499, help_text='checkout Amount between $300 - $499', validators=[django.core.validators.MinValueValidator(300), django.core.validators.MaxValueValidator(499)], verbose_name='L2 Amount Delta')),
                ('level_three_name', models.CharField(default='Level Three Discount System', max_length=30, unique=True, verbose_name='Level Three(L3)')),
                ('level_three_rate', models.PositiveIntegerField(default=5, help_text='Medium Rate for L3 Discount with minimum of 5%', validators=[django.core.validators.MinValueValidator(5)], verbose_name='L3 Rate')),
                ('level_three_start_amount', models.PositiveIntegerField(default=500, help_text='Minimum checkout Amount is $500', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(500)], verbose_name='L3 Amount Start')),
                ('level_three_delta_amount', models.PositiveIntegerField(default=999, help_text='checkout Amount between $500 - $999', validators=[django.core.validators.MinValueValidator(500), django.core.validators.MaxValueValidator(999)], verbose_name='L3 Amount Delta')),
                ('level_four_name', models.CharField(default='Level Four Discount System', max_length=30, unique=True, verbose_name='Level Four(L4)')),
                ('level_four_rate', models.PositiveIntegerField(default=7, help_text='Highest Rate for L4 Discount with minimum of 7%', validators=[django.core.validators.MinValueValidator(7)], verbose_name='L4 Rate')),
                ('level_four_start_amount', models.PositiveIntegerField(default=1000, help_text='Minimum checkout Amount is $1000 and Above', validators=[django.core.validators.MinValueValidator(1000), django.core.validators.MaxValueValidator(1000)], verbose_name='L4 Amount Start')),
            ],
            options={
                'verbose_name': 'Discount Level System',
                'verbose_name_plural': 'Discount Level System',
            },
        ),
        migrations.CreateModel(
            name='EmailConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_hosting_server', django_cryptography.fields.encrypt(models.CharField(blank=True, default='smtp.gmail.com', help_text='E.x: smtp.gmail.com', max_length=255, null=True, verbose_name='Email Hosting Server'))),
                ('email_hosting_server_password', django_cryptography.fields.encrypt(models.CharField(blank=True, default='ngnrfcsozfrxbgfx', max_length=255, null=True, verbose_name='Email Hosting Password'))),
                ('email_hosting_server_port', django_cryptography.fields.encrypt(models.CharField(blank=True, default=587, help_text='Usually 587 but confirm from your hosting company', max_length=10, null=True, verbose_name='Email Hosting Port'))),
                ('email_hosting_certificate', django_cryptography.fields.encrypt(models.CharField(choices=[('tls', 'TLS'), ('ssl', 'SSL')], default='tls', help_text='If your hosting support both, then we highly recommend the use of TLS', max_length=255, verbose_name='Email Hosting Certificate'))),
                ('email_hosting_server_email', django_cryptography.fields.encrypt(models.CharField(blank=True, default='example@gmail.com', max_length=100, null=True, verbose_name='Site Email'))),
                ('email_fail_silently', django_cryptography.fields.encrypt(models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', help_text='ds dsfds', max_length=10, null=True, verbose_name='Email Fail Silently'))),
                ('twilio_account_sid', django_cryptography.fields.encrypt(models.CharField(blank=True, default='Dvtksh883c9c3e9d9913a715557dddff99', max_length=255, null=True, verbose_name='Twilio Account SID'))),
                ('twilio_auth_token', django_cryptography.fields.encrypt(models.CharField(blank=True, default='abd4d45dd57dd79gldjrb1df2e2a6cd5', max_length=255, null=True, verbose_name='Twilio Account Auth Token'))),
                ('twilio_phone_number', django_cryptography.fields.encrypt(models.CharField(blank=True, default='+18001110005', max_length=255, null=True, verbose_name='Twilio Sending Phone Number'))),
            ],
            options={
                'verbose_name': 'Email Settings',
                'verbose_name_plural': 'Email Settings',
            },
        ),
        migrations.CreateModel(
            name='ExachangeRateAPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview', models.CharField(blank=True, default='Exchange rate API', max_length=100, null=True, verbose_name='Preamble')),
                ('exchange_rates_api_key', django_cryptography.fields.encrypt(models.CharField(blank=True, help_text='grab your key from https://exchangerate-api.com/', max_length=255, null=True, verbose_name='API Key'))),
            ],
            options={
                'verbose_name': 'Exchange Rates API',
                'verbose_name_plural': 'Exchange Rates API',
            },
        ),
        migrations.CreateModel(
            name='HiringFee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview', models.CharField(default='Freelancer fees and charges', max_length=50, verbose_name='Freelancer fees and charges')),
                ('contract_fee_percentage', models.PositiveIntegerField(default=0, help_text='This is the percentage fee per contract up to delta amount', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Contract Fee - Percentage (%)')),
                ('contract_fee_fixed', models.PositiveIntegerField(default=10, help_text='An extra contract fixed value charged beyond delta amount', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Contract Extra Fee - Fixed (#)')),
                ('contract_delta_amount', models.PositiveIntegerField(default=400, help_text='The break-point for charging Contract extra fee on freelancer earning', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50000)], verbose_name='Contract Break-Point ($)')),
                ('proposal_fee_percentage', models.PositiveIntegerField(default=10, help_text='This is the percentage fee per proposal up to delta amount', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Proposal Fee - Percentage (%)')),
                ('proposal_fee_fixed', models.PositiveIntegerField(default=10, help_text='An extra Proposal fixed value charged beyond delta amount', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Proposal Extra Fee - Fixed (#)')),
                ('proposal_delta_amount', models.PositiveIntegerField(default=400, help_text='The break-point for charging Proposal extra fee on freelancer earning', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50000)], verbose_name='Proposal Break-Point ($)')),
                ('application_fee_percentage', models.PositiveIntegerField(default=10, help_text='This is the percentage fee per Proposal up to delta amount', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Application Fee - Percentage (%)')),
                ('application_fee_fixed', models.PositiveIntegerField(default=10, help_text='An extra Proposal fixed value charged beyond delta amount', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Application Extra Fee - Fixed (#)')),
                ('application_delta_amount', models.PositiveIntegerField(default=400, help_text='The break-point for charging Proposal extra fee on freelancer earning', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50000)], verbose_name='Application Break-Point ($)')),
            ],
            options={
                'verbose_name': 'Hiring Fee System',
                'verbose_name_plural': 'Hiring Fee System',
            },
        ),
        migrations.CreateModel(
            name='Mailer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_hosting_server', django_cryptography.fields.encrypt(models.CharField(blank=True, default='smtp.gmail.com', help_text='E.x: smtp.gmail.com', max_length=255, null=True, verbose_name='Email Hosting Server'))),
                ('email_hosting_server_password', django_cryptography.fields.encrypt(models.CharField(blank=True, default='ngnrfcsozfrxbgfx', max_length=255, null=True, verbose_name='Email Server Password'))),
                ('email_hosting_username', django_cryptography.fields.encrypt(models.CharField(blank=True, help_text='This is the email hosting username created', max_length=255, null=True, verbose_name='Email Server Username'))),
                ('from_email', django_cryptography.fields.encrypt(models.CharField(blank=True, help_text='This email will be the site-wide sender email', max_length=255, null=True, verbose_name='From Email'))),
                ('email_use_tls', django_cryptography.fields.encrypt(models.BooleanField(blank=True, choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='If your hosting support both SSL and TLS, we recommend the use of TLS', null=True, verbose_name='Use TLS'))),
                ('email_use_ssl', django_cryptography.fields.encrypt(models.BooleanField(blank=True, choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='If SSL is set to "Yes", TLS should be "No", and vise-versa', null=True, verbose_name='Use SSL'))),
                ('email_fail_silently', django_cryptography.fields.encrypt(models.BooleanField(blank=True, choices=[(False, 'Show Error'), (True, 'Hide Error')], default=True, help_text='if you want users to see errors with your misconfiguration, set to "Show Error". We recommend that you Hide Error', null=True, verbose_name='Email Fail Silently'))),
                ('email_hosting_server_port', models.PositiveSmallIntegerField(blank=True, default=587, help_text='Usually 587 but confirm from your hosting company', null=True, verbose_name='Email Server Port')),
                ('email_timeout', models.PositiveSmallIntegerField(blank=True, default=60, help_text='the timeout time for email', null=True, verbose_name='Email Timeout')),
            ],
            options={
                'verbose_name': 'Mailer Settings',
                'verbose_name_plural': 'Mailer Settings',
            },
        ),
        migrations.CreateModel(
            name='PaymentAPIs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview', models.CharField(blank=True, default='This is the API Section for the integrated payment gateways', max_length=255, verbose_name='Preamble')),
                ('gateway_count', models.PositiveSmallIntegerField(blank=True, default=4, null=True, verbose_name='Number of Gateways')),
                ('stripe_public_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='STRIPE PUBLISHABLE KEY'))),
                ('stripe_secret_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='STRIPE SECRET KEY'))),
                ('stripe_webhook_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='STRIPE WEEBHOOK KEY(OPTIONAL)'))),
                ('stripe_subscription_price_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='STRIPE SUBSCRIPTION PRICE ID'))),
                ('paypal_public_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='PAYPAL PUBLISHABLE KEY'))),
                ('paypal_secret_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='PAYPAL SECRET KEY'))),
                ('paypal_subscription_price_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='PAYPAL SUBSCRIPTION PRICE ID'))),
                ('flutterwave_public_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='FLUTTERWAVE PUBLISHABLE KEY'))),
                ('flutterwave_secret_key', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='FLUTTERWAVE SECRET KEY'))),
                ('flutterwave_subscription_price_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='FLUTTERWAVE SUBSCRIPTION PRICE ID'))),
                ('razorpay_public_key_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='RAZORPAY PUBLISHABLE KEY'))),
                ('razorpay_secret_key_id', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='RAZORPAY SECRET KEY'))),
            ],
            options={
                'verbose_name': 'Payment API',
                'verbose_name_plural': 'Payment API',
            },
        ),
        migrations.CreateModel(
            name='PaymentGateway',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='type of payment gateway e.g PayPal', max_length=255, null=True, unique=True, verbose_name='Payment Gateway')),
                ('status', models.BooleanField(choices=[(False, 'Inactive'), (True, 'Active')], default=False, verbose_name='Status')),
                ('processing_fee', models.PositiveIntegerField(blank=True, default=0, help_text='discount price must be less than actual price', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)], verbose_name='Processing Fee')),
                ('ordering', models.PositiveIntegerField(default=1, help_text='This determines how each Gateway will appear to user eg, 1 means 1st position', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Ordering')),
                ('default', models.BooleanField(blank=True, choices=[(False, 'No'), (True, 'Yes')], verbose_name='Default')),
            ],
            options={
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='PaymentsControl',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preview', models.CharField(default='All about Transfer and Withdrawal configuration', max_length=50, verbose_name='Payment Settings')),
                ('min_balance', models.PositiveIntegerField(default=0, help_text='After making transfer or withdrawal, User account cannot fall below this limit $(0 - 200)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(200)], verbose_name='Minimum T/W Balance')),
                ('max_receiver_balance', models.PositiveIntegerField(default=2000, help_text='After making transfer, RECEIVER account cannot fall above this limit $(201 - 2000)', validators=[django.core.validators.MinValueValidator(201), django.core.validators.MaxValueValidator(2100)], verbose_name='Maximum Receiver Balance')),
                ('min_transfer', models.PositiveIntegerField(default=20, help_text='Minimum amount Team Owner/Freelancer can transfer per transaction - $(20 - 200)', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(200)], verbose_name='Minimum Transfer')),
                ('max_transfer', models.PositiveIntegerField(default=500, help_text='Maximum amount Team Owner/Freelancer can transfer per transaction - $(201 - 2000)', validators=[django.core.validators.MinValueValidator(201), django.core.validators.MaxValueValidator(2100)], verbose_name='Maximum Transfer')),
                ('min_withdrawal', models.PositiveIntegerField(default=20, help_text='Minimum Amont freelancer can withdraw per transaction - $(20 - 200)', validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(200)], verbose_name='Minimum Withdrawal')),
                ('max_withdrawal', models.PositiveIntegerField(default=500, help_text='Maximum Amont freelancer can withdraw per transaction - $(201 - 2000)', validators=[django.core.validators.MinValueValidator(201), django.core.validators.MaxValueValidator(2100)], verbose_name='Maximum Withdrawal')),
            ],
            options={
                'verbose_name': 'Payment Settings',
                'verbose_name_plural': 'Payment Settings',
            },
        ),
        migrations.CreateModel(
            name='ProposalGuides',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guide', models.CharField(help_text='Instructions you want to show to customers', max_length=100, unique=True, verbose_name='guide')),
                ('status', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Instruction',
                'verbose_name_plural': 'Instructions',
            },
        ),
        migrations.CreateModel(
            name='Size',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(blank=True, help_text='Business Size field is Required', max_length=100, unique=True, verbose_name='Business Size')),
            ],
            options={
                'verbose_name': 'Business Size',
                'verbose_name_plural': 'Business Sizes',
            },
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='Skill field is Required', max_length=100, unique=True, verbose_name='Skill')),
            ],
        ),
        migrations.CreateModel(
            name='SubscriptionGateway',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, help_text='type of payment gateway e.g PayPal', max_length=255, null=True, unique=True, verbose_name='Payment Gateway')),
                ('status', models.BooleanField(choices=[(False, 'Inactive'), (True, 'Active')], default=False, verbose_name='Status')),
                ('processing_fee', models.PositiveIntegerField(blank=True, default=0, help_text='discount price must be less than actual price', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20000)], verbose_name='Processing Fee')),
                ('ordering', models.PositiveIntegerField(default=1, help_text='This determines how each Gateway will appear to user eg, 1 means 1st position', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Ordering')),
                ('default', models.BooleanField(blank=True, choices=[(False, 'No'), (True, 'Yes')], verbose_name='Default')),
            ],
            options={
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='TestEmail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', django_cryptography.fields.encrypt(models.CharField(blank=True, default='My Test Email', max_length=20, null=True, verbose_name='Testing Email'))),
                ('test_email', django_cryptography.fields.encrypt(models.EmailField(blank=True, help_text='Test the email settings by sending a Test mail', max_length=100, null=True, verbose_name='Enter Email and Save to send'))),
            ],
            options={
                'verbose_name': 'Test Email Settings',
                'verbose_name_plural': 'Test Email',
            },
        ),
        migrations.CreateModel(
            name='WebsiteSetting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('site_name', models.CharField(blank=True, default='Example', max_length=50, null=True, verbose_name='Site Name')),
                ('tagline', models.CharField(blank=True, default='The Marketplace', max_length=150, null=True, verbose_name='Site Tagline')),
                ('site_description', models.TextField(blank=True, default='The Example Marketplace', max_length=300, null=True, verbose_name='Site Decription')),
                ('site_Logo', models.ImageField(blank=True, default='site/logo.png', null=True, upload_to='site/', verbose_name='Site Logo')),
                ('protocol', models.CharField(choices=[('https://', 'https://'), ('https://', 'http://')], default='https://', max_length=20, verbose_name='Protocol Type')),
                ('www', models.CharField(choices=[('www.', 'www.'), ('none', 'none')], default='www.', max_length=20, verbose_name='Use www path')),
                ('site_domain', models.CharField(blank=True, default='example.com', help_text='E.x: example.com', max_length=255, null=True, verbose_name='Website Domain')),
                ('site_url', models.URLField(blank=True, help_text='E.x: https://www.example.com', max_length=255, null=True, verbose_name='Website URL')),
            ],
            options={
                'verbose_name': 'Site Settings',
                'verbose_name_plural': 'Site Settings',
            },
        ),
        migrations.CreateModel(
            name='CurrencyConverter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='currencyconverter', to='general_settings.currency', verbose_name='Currency Type')),
            ],
            options={
                'verbose_name': 'Currency Converter',
                'verbose_name_plural': 'Currency Converter',
            },
        ),
    ]
