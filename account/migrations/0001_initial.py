# Generated by Django 3.2.8 on 2023-04-23 18:41

from django.conf import settings
import django.contrib.sites.managers
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import django_cryptography.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Email Address')),
                ('short_name', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Last Name')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone')),
                ('is_active', models.BooleanField(default=False, help_text='Important: This controls login access for Staffs, Freelancer and CLient', verbose_name='Activate User')),
                ('is_staff', models.BooleanField(default=False, help_text="Important: Addition to 'Activate/Deactivate User Login', this controls login access for SuperAdmin and Staffs only", verbose_name='Activate Staff')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='CEO/SuperAdmin')),
                ('is_assistant', models.BooleanField(default=False, verbose_name='Virtual Assistant')),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('merchant', 'Merchant'), ('freelancer', 'Freelancer'), ('client', 'Client')], max_length=30, verbose_name='User Type')),
                ('active_merchant_id', models.PositiveIntegerField(default=0, verbose_name='Active Merchant ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date Joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Last Login')),
            ],
            options={
                'verbose_name': 'User Manager',
                'verbose_name_plural': 'User Manager',
                'ordering': ('-date_joined',),
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('merchants', django.contrib.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Country Name')),
                ('country_code', models.CharField(blank=True, max_length=10, verbose_name='Country Code')),
                ('flag', models.ImageField(blank=True, null=True, upload_to='country_flag/', verbose_name='Country Flag')),
                ('ordering', models.PositiveIntegerField(blank=True, null=True, verbose_name='Order Priority')),
                ('supported', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, verbose_name='Supported')),
                ('official_name', models.CharField(blank=True, max_length=100, verbose_name='Official Name')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveIntegerField(choices=[(1, 'Exempted'), (2, 'Beta'), (4, 'Trialing'), (5, 'Active'), (6, 'Past Due'), (7, 'Canceled'), (8, 'Trial Expired')], default=4, verbose_name='Account Status')),
                ('business_name', models.CharField(max_length=255, verbose_name='Business Name')),
                ('package_expiry', models.DateTimeField(blank=True, null=True, verbose_name='Package Expiry Date')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10, verbose_name='Gender')),
                ('tagline', models.CharField(blank=True, max_length=100, verbose_name='Tagline')),
                ('description', models.TextField(blank=True, error_messages={'name': {'max_length': 'A maximum of 2000 words required'}}, max_length=2000, verbose_name='Description')),
                ('profile_photo', models.ImageField(default='client/avatar5.png', upload_to='client/', verbose_name='Profile Photo')),
                ('company_logo', models.ImageField(default='client/logo.png', upload_to='client/', verbose_name='Brand Logo')),
                ('banner_photo', models.ImageField(default='client/banner.png', upload_to='client/', verbose_name='Banner Photo')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Residence Address')),
                ('announcement', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Announcement')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Last Created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Last Modified')),
            ],
            options={
                'verbose_name': 'Merchant',
                'verbose_name_plural': 'Merchants',
                'ordering': ('-created_at',),
            },
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('curr_merchant', django.contrib.sites.managers.CurrentSiteManager()),
            ],
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Basic', 'Starter'), ('Team', 'Standard'), ('Enterprise', 'Enterprise')], default='Basic', max_length=50, unique=True, verbose_name='Package Type')),
                ('verbose_type', models.CharField(blank=True, help_text='Customize name for the package. If empty, the default names will be displayed', max_length=50, null=True, unique=True, verbose_name='Branded Name')),
                ('can_change_domain', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='Merchant with this package can change domain', verbose_name='Domain Change')),
                ('ssl_activation', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='Domains on site will be provided with ssl. We recommend actiovation for all domains', verbose_name='SSL Installation')),
                ('max_num_of_staff', models.PositiveIntegerField(default=1, help_text='Numner of staffs that merchant can invite', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Number of Staff')),
                ('can_upsell_teams', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='Merchant with this package can sell subscription to their freelancers who want to upgrade', verbose_name='Upselling Subscription')),
                ('max_users_sitewide', models.PositiveIntegerField(default=100, help_text='Total users including merchant and staffs', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000000)], verbose_name='Max number of users')),
                ('multiple_freelancer_teams', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='Each freelancer can create multiple teams', verbose_name='Multiple teams per Freelancer')),
                ('monthly_offer_contracts_per_team', models.PositiveIntegerField(default=0, help_text="Clients can view team member's profile and send offer Contracts up to 100 monthly", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Monthly Offer Contracts')),
                ('max_proposals_allowable_per_team', models.PositiveIntegerField(default=5, help_text='You can add min of 5 and max of 50 Proposals per Team', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)], verbose_name='Max Proposals Per Team')),
                ('monthly_projects_applicable_per_team', models.PositiveIntegerField(default=10, help_text='Monthly Jobs Applications with min of 5 and max 50', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)], verbose_name='Monthly Applications Per Team')),
                ('daily_Handshake_mails_to_clients', models.PositiveIntegerField(default=0, help_text='New feature Coming Soon: Here, freelancer team can send followup/ reminder mail per external contract to client. Daily sending will have min of 1 amd max is 3 mails', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='Daily Contract Mail reminder')),
                ('price', models.PositiveIntegerField(default=0, help_text='Decide your reasonable price with max limit of 1000', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Package Price')),
                ('is_default', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text="Only 1 package should have a default set to 'Yes'", verbose_name='Make Default')),
                ('ordering', models.PositiveIntegerField(default=1, help_text='This determines how each package will appear to user eg, 1 means first position', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Display')),
            ],
            options={
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pass_code', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='Access Token'))),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Last Login')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='twofactorauth', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Access Token',
                'verbose_name_plural': 'Access Token',
                'ordering': ('-last_login',),
            },
        ),
    ]
