# Generated by Django 4.1.9 on 2023-09-21 14:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_cryptography.fields
import general_settings.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=100, unique=True, verbose_name='Email Address')),
                ('short_name', models.CharField(blank=True, max_length=30, null=True, unique=True, verbose_name='Username')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Last Name')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone')),
                ('is_active', models.BooleanField(default=False, help_text='Important: This controls login access for Staffs, Freelancer and CLient', verbose_name='Activate User')),
                ('is_staff', models.BooleanField(default=False, help_text="Important: Addition to 'Activate/Deactivate User Login', this controls login access for SuperAdmin and Staffs only", verbose_name='Activate Staff')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='CEO/SuperAdmin')),
                ('is_assistant', models.BooleanField(default=False, verbose_name='Virtual Assistant')),
                ('user_type', models.CharField(choices=[('admin', 'Admin'), ('merchant', 'Merchant'), ('freelancer', 'Freelancer'), ('client', 'Client')], max_length=30, verbose_name='User Type')),
                ('active_merchant_id', models.PositiveIntegerField(default=0, verbose_name='Active Merchant ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Date Joined')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Last Login')),
            ],
            options={
                'verbose_name': 'User Manager',
                'verbose_name_plural': 'User Manager',
                'ordering': ('-date_joined',),
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='City Name')),
                ('latitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='latitude')),
                ('longitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='longitude')),
                ('wikidata', models.CharField(blank=True, max_length=255, null=True, verbose_name='Wiki Data Id')),
                ('ordering', models.PositiveIntegerField(blank=True, null=True, verbose_name='Order Priority')),
            ],
            options={
                'verbose_name': 'City',
                'verbose_name_plural': 'Cities',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='Country Name')),
                ('country_code', models.CharField(blank=True, max_length=150, verbose_name='Country Code')),
                ('region', models.CharField(blank=True, max_length=255, null=True, verbose_name='Continent')),
                ('subregion', models.CharField(blank=True, max_length=255, null=True, verbose_name='Sub Continent')),
                ('latitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='Latitude')),
                ('longitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='Longitude')),
                ('currency_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Currency')),
                ('currency', models.CharField(blank=True, max_length=255, verbose_name='Currency')),
                ('phone_code', models.CharField(blank=True, max_length=255, verbose_name='Phone Code')),
                ('flag', models.ImageField(blank=True, null=True, upload_to='country_flag/', verbose_name='Country Flag')),
                ('ordering', models.PositiveIntegerField(blank=True, null=True, verbose_name='Order Priority')),
                ('supported', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, verbose_name='Supported')),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Merchant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tagline', models.CharField(blank=True, default='The Marketplace', max_length=150, null=True, verbose_name='Site Tagline')),
                ('description', models.TextField(blank=True, default='The Example Marketplace', max_length=300, null=True, verbose_name='Site Decription')),
                ('site_Logo', models.ImageField(blank=True, default='site/logo.png', null=True, upload_to=general_settings.models.site_path, verbose_name='Site Logo')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Business Address')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Last Created')),
                ('modified', models.DateTimeField(auto_now=True, verbose_name='Last Modified')),
                ('proposal_detail', models.BooleanField(choices=[(False, 'Proposal with Full Image'), (True, 'Proposal with Side Image')], default=False, verbose_name='Proposal Detail Display')),
                ('category_type', models.BooleanField(choices=[(False, 'Flat Display Category'), (True, 'Popup Display Category')], default=False, verbose_name='Category Type')),
                ('project_type', models.BooleanField(choices=[(False, 'VerticaL display'), (True, 'Horizontal display')], default=False, verbose_name='Job Listing Type')),
                ('banner_type', models.CharField(choices=[('slide', 'Carousel Banner'), ('royal', 'Royal Banner'), ('hero', 'Hero Banner')], default='royal', max_length=20, verbose_name='Banner Activator')),
                ('title_block', models.CharField(default='Hire Experts or Team', max_length=100, verbose_name='Banner Title')),
                ('subtitle_block', models.CharField(default='Consectetur adipisicing elit sed dotem eiusmod tempor incuntes ut labore etdolore maigna aliqua enim.', max_length=150, verbose_name='Banner Subtitle')),
                ('video_title', models.CharField(blank=True, default='See For Yourself!', max_length=100, null=True, verbose_name='Royal Video Title')),
                ('video_description', models.CharField(blank=True, default='Hire Experts or Team', max_length=100, null=True, verbose_name='Royal Video Description')),
                ('video_url', models.URLField(blank=True, help_text='Your can Paste your Youtube or Vimeo video url here to embed. Only secured url allowed', null=True, verbose_name='Royal embed Video')),
                ('banner_image', models.ImageField(blank=True, help_text="image must be any of these: 'JPEG','JPG','PNG','PSD'", null=True, upload_to=general_settings.models.site_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['JPG', 'JPEG', 'PNG', 'PSD'])], verbose_name='Home Banner Image')),
                ('banner_color', models.CharField(blank=True, default='purple', help_text="Put your color here to decorate Hero Banner Background and buttons like signup and login. Example '3F0F8FF', or 'red' or 'blue' or 'purple' or any css color code. Warning!: Donnot add quotation marks around the color attributes", max_length=100, null=True, verbose_name='Hero Background Color')),
                ('banner_button_one_color', models.CharField(blank=True, default='green', help_text="Put your bootstrap color here to decorate Hero Button 1. Example 'primary' or 'secondary' or 'light' or 'success' . Warning!: Exclude quotation marks when you input color attributes", max_length=100, null=True, verbose_name='Hero Button1 Color')),
                ('banner_button_two_color', models.CharField(blank=True, default='light', help_text="Put your bootstrap color here to decorate Hero Button 2. Example 'primary' or 'secondary' or 'light' or 'success' . Warning!: Exclude quotation marks when you input color attributes", max_length=100, null=True, verbose_name='Hero Button2 Color')),
                ('promo_type', models.CharField(choices=[('zero', 'No Marketing'), ('one', 'Call to Action'), ('two', 'How it Works')], default='two', max_length=30, verbose_name='Marketing Section')),
                ('promo_title', models.CharField(blank=True, default='#1 Choice For Businesses', max_length=100, null=True, verbose_name='Div Four Promo Title')),
                ('promo_subtitle', models.CharField(blank=True, default='Business on the Go', max_length=100, null=True, verbose_name='Div Four Promo Subitle')),
                ('promo_description', models.TextField(blank=True, default='The Example Marketplace', max_length=300, null=True, verbose_name='Div Four Promo Decription')),
                ('promo_image', models.ImageField(blank=True, default='freelancer/awards/banner.png', null=True, upload_to='promo/', verbose_name='Promo Image')),
                ('footer_description', models.TextField(blank=True, default='Dotem eiusmod tempor incune utnaem labore etdolore maigna aliqua enim poskina ilukita ylokem lokateise ination voluptate velit esse cillum dolore eu fugiat nulla pariatur lokaim urianewce', max_length=250, null=True, verbose_name='Footer Content')),
                ('button_color', models.CharField(blank=True, default='purple', help_text="Customize colors for signup, login, any other visitor buttons. Example '3F0F8FF', or 'red' or 'blue' or 'purple' or any css color code. Warning!: Donnot add quotation marks around the color attributes", max_length=100, null=True, verbose_name='Visitor Buttons')),
                ('navbar_color', models.CharField(blank=True, default='purple', help_text="Customize colors for Navbar. Example '3F0F8FF', or 'red' or 'blue' or 'purple' or any css color code. Warning!: Donnot add quotation marks around the color attributes", max_length=100, null=True, verbose_name='NavBar Color')),
                ('twitter_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Twitter page', max_length=255, null=True, verbose_name='Twitter Page')),
                ('instagram_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Instagram page', max_length=255, null=True, verbose_name='Instagram Page')),
                ('youtube_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Youtube page', max_length=255, null=True, verbose_name='Youtube Page')),
                ('facebook_url', models.URLField(blank=True, help_text='Enter the full secure url path of your Facebook page', max_length=255, null=True, verbose_name='Facebook Page')),
                ('brand_ambassador_image', models.ImageField(blank=True, help_text="This will appear to logged-in user on 'About Us Page, Freelancer page, project page'. Size should be 255px x 255px. image must be any of these: 'JPEG','JPG','PNG','PSD'", null=True, upload_to=general_settings.models.site_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['JPG', 'JPEG', 'PNG', 'PSD'])], verbose_name='Brand Ambassador Image')),
                ('announcement', models.TextField(blank=True, max_length=1000, null=True, verbose_name='Announcement')),
                ('type', models.PositiveIntegerField(choices=[(1, 'Exempted'), (2, 'Beta'), (4, 'Trialing'), (5, 'Active'), (6, 'Past Due'), (7, 'Canceled'), (8, 'Trial Expired')], default=4, verbose_name='Account Status')),
                ('business_name', models.CharField(max_length=255, verbose_name='Business Name')),
                ('domain', models.CharField(max_length=255, verbose_name='Default Domain')),
                ('package_expiry', models.DateTimeField(blank=True, null=True, verbose_name='Package Expiry Date')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10, verbose_name='Gender')),
                ('profile_photo', models.ImageField(default='client/avatar5.png', upload_to='client/', verbose_name='Profile Photo')),
                ('show_gateways', models.BooleanField(default=True, verbose_name='Display Gateway')),
                ('gateway_title', models.CharField(blank=True, default='Collection and Payout Methods', max_length=100, null=True, verbose_name='Gateway Title')),
                ('proposal_title', models.CharField(blank=True, default='Explore Proposals', max_length=100, null=True, verbose_name='Div Three Proposal Title')),
                ('proposal_subtitle', models.CharField(blank=True, default='Verified Proposals', max_length=100, null=True, verbose_name='Div Three Proposal Subitle')),
                ('project_title', models.CharField(blank=True, default='Published Jobs', max_length=100, null=True, verbose_name='Div Five Project Title')),
                ('project_subtitle', models.CharField(blank=True, default='Apply and get Hired', max_length=100, null=True, verbose_name='Div Five Project Subitle')),
                ('category_title', models.CharField(blank=True, default='Explore Categories', max_length=100, null=True, verbose_name='Div Two Category Title')),
                ('category_subtitle', models.CharField(blank=True, default='Professional by categories', max_length=100, null=True, verbose_name='Div Two Category Subitle')),
                ('level_one_name', models.CharField(default='Level One Discount System', max_length=30, verbose_name='Level One(L1)')),
                ('level_one_rate', models.PositiveIntegerField(default=0, help_text='Starting Rate for L1 Discount with minimum default of 0 %', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(0)], verbose_name='L1 Rate')),
                ('level_one_start_amount', models.PositiveIntegerField(default=10, help_text='Minimum checkout amount with default of zero(0) currency points', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='L1 Amount Start')),
                ('level_one_delta_amount', models.PositiveIntegerField(default=299, help_text='checkout amount delta with default of 199 currency points', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='L1 Amount Delta')),
                ('level_two_name', models.CharField(default='Level Two Discount System', max_length=30, verbose_name='Level Two(L2)')),
                ('level_two_rate', models.PositiveIntegerField(default=3, help_text='Second level Rate for L2 Discount with minimum default of 3%', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='L2 Rate')),
                ('level_two_start_amount', models.PositiveIntegerField(default=300, help_text='Minimum checkout amount with default of 300 currency points', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='L2 Amount Start')),
                ('level_two_delta_amount', models.PositiveIntegerField(default=499, help_text='checkout amount delta with default of 499 currency points', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='L2 Amount Delta')),
                ('level_three_name', models.CharField(default='Level Three Discount System', max_length=30, verbose_name='Level Three(L3)')),
                ('level_three_rate', models.PositiveIntegerField(default=5, help_text='Medium Rate for L3 Discount with minimum default of 5%', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='L3 Rate')),
                ('level_three_start_amount', models.PositiveIntegerField(default=500, help_text='Minimum checkout amount with default of 500 currency points', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='L3 Amount Start')),
                ('level_three_delta_amount', models.PositiveIntegerField(default=999, help_text='checkout amount delta with default of 999 currency points', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='L3 Amount Delta')),
                ('level_four_name', models.CharField(default='Level Four Discount System', max_length=30, verbose_name='Level Four(L4)')),
                ('level_four_rate', models.PositiveIntegerField(default=7, help_text='Highest Rate for L4 Discount with minimum default of 7%', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='L4 Rate')),
                ('level_four_start_amount', models.PositiveIntegerField(default=1000, help_text='Minimum checkout Amount with default of 1000 currency points', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='L4 Amount Start')),
            ],
            options={
                'verbose_name': 'Merchant',
                'verbose_name_plural': 'Merchants',
                'ordering': ('-created_at',),
            },
        ),
        migrations.CreateModel(
            name='Package',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('Basic', 'Starter'), ('Team', 'Standard'), ('Enterprise', 'Enterprise')], default='Basic', max_length=50, unique=True, verbose_name='Package Type')),
                ('verbose_type', models.CharField(blank=True, help_text='Customize name for the package. If empty, the default names will be displayed', max_length=50, null=True, unique=True, verbose_name='Branded Name')),
                ('can_change_domain', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='Merchant with this package can change domain', verbose_name='Domain Change')),
                ('ssl_activation', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=True, help_text='Domains on site will be provided with ssl. We recommend actiovation for all domains', verbose_name='SSL Installation')),
                ('multiple_freelancer_teams', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='Enables each freelancer can create multiple teams', verbose_name='Multiple teams per Freelancer')),
                ('max_num_of_staff', models.PositiveIntegerField(default=1, help_text='Numner of staffs that merchant can invite', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Number of Staff')),
                ('can_upsell_teams', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text='Merchant with this package can sell subscription to their freelancers who want to upgrade', verbose_name='Upselling Subscription')),
                ('max_users_sitewide', models.PositiveIntegerField(default=100, help_text='Total users including merchant and staffs', validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(1000000)], verbose_name='Max number of users')),
                ('price', models.PositiveIntegerField(default=0, help_text='Decide your reasonable price with max limit of 1000', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Package Price')),
                ('is_default', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, help_text="Only 1 package should have a default set to 'Yes'", verbose_name='Make Default')),
                ('ordering', models.PositiveIntegerField(default=1, help_text='This determines how each package will appear to user eg, 1 means first position', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)], verbose_name='Display')),
                ('max_proposals_allowable_per_team', models.PositiveIntegerField(default=5, help_text='You can add min of 5 and max of 50 Proposals per Team', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)], verbose_name='Max Proposals Per Team')),
                ('monthly_projects_applicable_per_team', models.PositiveIntegerField(default=10, help_text='Monthly Jobs Applications with min of 5 and max 50', validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(50)], verbose_name='Monthly Applications Per Team')),
                ('monthly_offer_contracts_per_team', models.PositiveIntegerField(default=0, help_text="Clients can view team member's profile and send offer Contracts up to 100 monthly", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Monthly Offer Contracts')),
                ('max_member_per_team', models.PositiveIntegerField(default=0, help_text='New feature Coming Soon: Here, freelancer team can send followup/ reminder mail per external contract to client. Daily sending will have min of 1 amd max is 3 mails', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(3)], verbose_name='Max Member per Team')),
                ('upsell_price', models.PositiveIntegerField(default=0, help_text='Decide your reasonable price with max limit of 1000', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(1000)], verbose_name='Upsell Price')),
            ],
            options={
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='TwoFactorAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pass_code', django_cryptography.fields.encrypt(models.CharField(blank=True, max_length=255, null=True, verbose_name='Access Token'))),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Last Login')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='twofactorauth', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Access Token',
                'verbose_name_plural': 'Access Token',
                'ordering': ('-last_login',),
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='State Name')),
                ('state_code', models.CharField(blank=True, max_length=100, verbose_name='State Code')),
                ('latitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='latitude')),
                ('longitude', models.CharField(blank=True, max_length=255, null=True, verbose_name='longitude')),
                ('ordering', models.PositiveIntegerField(blank=True, null=True, verbose_name='Order Priority')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='states', to='account.country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'State',
                'verbose_name_plural': 'States',
                'ordering': ['ordering'],
            },
        ),
    ]
