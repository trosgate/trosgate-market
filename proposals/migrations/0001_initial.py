# Generated by Django 3.2.8 on 2022-05-24 22:47

import ckeditor.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import embed_video.fields
import proposals.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('general_settings', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='OfferContract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_duration', models.CharField(choices=[('01 day', '01 Day'), ('02 days', '02 Days'), ('03 days', '03 Days'), ('04 days', '04 Days'), ('05 days', '05 Days'), ('06 days', '06 Days'), ('01 week', '01 Week'), ('02 week', '02 Weeks'), ('03 week', '03 Weeks'), ('01 month', '01 Month'), ('02 month', '02 Months'), ('03 month', '03 Months'), ('04 month', '04 Months'), ('05 month', '05 Months'), ('06 month', '06 Months')], default='01 day', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('overdue', 'Overdue'), ('paid', 'Paid')], default='active', max_length=100)),
                ('notes', models.TextField(blank=True, max_length=500, null=True)),
                ('reference', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('slug', models.SlugField(blank=True, max_length=100, null=True)),
                ('date_created', models.DateTimeField(blank=True, null=True)),
                ('last_updated', models.DateTimeField(blank=True, null=True)),
                ('line_one', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Product/Service One')),
                ('line_one_quantity', models.IntegerField(blank=True, default=0, null=True, verbose_name='Quantity')),
                ('line_one_unit_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Unit Price')),
                ('line_one_total_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Total')),
                ('line_two', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Product/Service Two')),
                ('line_two_quantity', models.IntegerField(blank=True, default=0, null=True, verbose_name='Quantity')),
                ('line_two_unit_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Unit Price')),
                ('line_two_total_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Total')),
                ('line_three', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Product/Service Three')),
                ('line_three_quantity', models.IntegerField(blank=True, default=0, null=True, verbose_name='Quantity')),
                ('line_three_unit_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Unit Price')),
                ('line_three_total_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Total')),
                ('line_four', models.CharField(blank=True, default=None, max_length=120, null=True, verbose_name='Product/Service Four')),
                ('line_four_quantity', models.IntegerField(blank=True, default=0, null=True, verbose_name='Quantity')),
                ('line_four_unit_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Unit Price')),
                ('line_four_total_price', models.IntegerField(blank=True, default=0, null=True, verbose_name='Total')),
                ('grand_total', models.IntegerField(blank=True, default=0, null=True, verbose_name='Grand Total')),
            ],
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='title field is Required', max_length=255, unique=True, verbose_name='Title')),
                ('slug', models.SlugField(max_length=255, verbose_name='Slug')),
                ('preview', models.CharField(error_messages={'name': {'max_length': 'Preview field is required with maximum of 250 characters'}}, max_length=255, verbose_name='Preview')),
                ('sample_link', models.URLField(blank=True, help_text='the link must be a verified url', max_length=2083, null=True, verbose_name='Sample Website')),
                ('status', models.CharField(choices=[('review', 'Review'), ('active', 'Active'), ('modify', 'Modify'), ('archived', 'Archived')], default='review', max_length=20, verbose_name='Status')),
                ('description', ckeditor.fields.RichTextField(error_messages={'name': {'max_length': 'Description field is required'}}, max_length=3500, verbose_name='Description')),
                ('faq_one', models.CharField(max_length=100, verbose_name='FAQ #1')),
                ('faq_one_description', models.TextField(max_length=255, verbose_name='FAQ #1 Details')),
                ('faq_two', models.CharField(blank=True, max_length=100, null=True, verbose_name='FAQ #2')),
                ('faq_two_description', models.TextField(blank=True, max_length=255, null=True, verbose_name='FAQ #2 Details')),
                ('faq_three', models.CharField(blank=True, max_length=100, null=True, verbose_name='FAQ #3')),
                ('faq_three_description', models.TextField(blank=True, max_length=255, null=True, verbose_name='FAQ #3 Details')),
                ('salary', models.PositiveIntegerField(default=10, help_text='Minimum Salary is $10', validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(50000)], verbose_name='Salary')),
                ('service_level', models.CharField(choices=[('basic', 'Basic'), ('standard', 'Standard'), ('premium', 'Premium')], default='basic', error_messages={'name': {'max_length': 'Service Level field is required'}}, max_length=20, verbose_name='Service level')),
                ('revision', models.BooleanField(choices=[(False, 'No'), (True, 'Yes')], default=False, verbose_name='Revision')),
                ('dura_converter', models.CharField(choices=[('one_day', '01 Day'), ('two_days', '02 Days'), ('three_days', '03 Days'), ('four_days', '04 Days'), ('five_days', '05 Days'), ('six_days', '06 Days'), ('one_week', '01 Week'), ('two_weeks', '02 Weeks'), ('three_weeks', '03 Weeks'), ('one_month', '01 Month')], default='one_day', max_length=100, verbose_name='Duration')),
                ('duration', models.DateTimeField(blank=True, help_text='duration for proposal task to be completed', verbose_name='Completion In')),
                ('discount_price', models.PositiveIntegerField(blank=True, default=5, help_text='discount price must be less than actual price', null=True, validators=[django.core.validators.MinValueValidator(5), django.core.validators.MaxValueValidator(10000)], verbose_name='Discount Price')),
                ('discount_code', models.CharField(blank=True, help_text='Discount code for customer', max_length=20, null=True, verbose_name='Discount code')),
                ('video', embed_video.fields.EmbedVideoField(blank=True, help_text='Paste Youtube or Vimeo url here', max_length=2083, null=True, verbose_name='Proposal Video')),
                ('thumbnail', models.ImageField(blank=True, default='proposal_files/thumbnail.jpg', help_text="image must be any of these 'JPEG','JPG','PNG','PSD', and dimension 820x312", upload_to=proposals.models.proposal_images_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['JPG', 'JPEG', 'PNG', 'PSD'])], verbose_name='Proposal Thumbnail')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
                ('published', models.BooleanField(choices=[(False, 'Private'), (True, 'Public')], default=False, verbose_name='Published')),
                ('file_type', models.BooleanField(choices=[(False, 'Show Video'), (True, 'Show Image')], default=False)),
                ('reference', models.CharField(blank=True, max_length=100, null=True, unique=True)),
                ('category', models.ForeignKey(max_length=250, on_delete=django.db.models.deletion.RESTRICT, related_name='proposal', to='general_settings.category', verbose_name='Category')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposalauthor', to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('skill', models.ManyToManyField(error_messages={'name': {'max_length': 'Skill field is required'}}, to='general_settings.Skill', verbose_name='Proposal Skills')),
            ],
            options={
                'verbose_name': 'Proposal',
                'verbose_name_plural': 'Proposals',
                'ordering': ('-created_at',),
            },
        ),
    ]
